// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.72'
    repositories {
        google()
        mavenCentral()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    def needReplaceLocal = true
    gradle.startParameter.taskNames.each {
        if (it.contains('uploadArchives')) {
            needReplaceLocal = false
        }
    }
    if (needReplaceLocal) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module('com.github.penfeizhou.android.animation:frameanimation') with project(":frameanimation")
                    substitute module('com.github.penfeizhou.android.animation:apng') with project(":apng")
                    substitute module('com.github.penfeizhou.android.animation:awebp') with project(":awebp")
                    substitute module('com.github.penfeizhou.android.animation:gif') with project(":gif")
                    substitute module('com.github.penfeizhou.android.animation:glide-plugin') with project(":plugin_glide")
                }
            }
        }
    }

    ext {
        minSdkVersion = 21
        targetSdkVersion = 32
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

Properties properties = new Properties()
properties.load(project.rootProject.file('version.properties').newDataInputStream())

ext {
    Version = properties.version
}

task publishFrameAnimation dependsOn(":frameanimation:uploadArchives") {
    println "FrameAnimation published"
}

task publishAPNG dependsOn(publishFrameAnimation, ":apng:uploadArchives") {
    println "APNG published"
}

task publishAWebP dependsOn(publishFrameAnimation, ":awebp:uploadArchives") {
    println "AWebP published"
}

task publishGif dependsOn(publishFrameAnimation, ":gif:uploadArchives") {
    println "Gif published"
}

task publishAWebPEncoder dependsOn(publishAWebP, publishGif, ":awebpencoder:uploadArchives") {
    println "AwebP Encoder published"
}

task publishGlidePlugin dependsOn(publishAPNG, publishAWebP, publishGif, ":plugin_glide:uploadArchives") {
    println "GlidePlugin published"
}

task PublishAll dependsOn(publishGlidePlugin, publishAWebPEncoder) {
    println "All published"
}
